sql.insert=INSERT INTO apartments (id, room_count, apartment_type_id, price, name) VALUES (DEFAULT, ?, ?, ?, ?);
sql.getById=SELECT \
   a.id, \
   a.room_count, \
   a.apartment_type_id, \
   at.name, \
   a.price, \
   a.name \
FROM apartments a \
INNER JOIN apartment_types at ON at.id = a.apartment_type_id \
WHERE a.id = ?;
sql.update=UPDATE apartments SET room_count = ?, apartment_type_id = ?, price = ?, name = ? WHERE id = ?;
sql.deleteById=DELETE FROM apartments WHERE id = ?;
sql.count=SELECT COUNT(*) FROM apartments;
sql.list=SELECT \
   a.id, \
   a.room_count, \
   a.apartment_type_id, \
   at.name, \
   a.price, \
   a.name \
FROM apartments a \
    INNER JOIN apartment_types at ON at.id = a.apartment_type_id \
ORDER BY a.id ASC \
LIMIT %s \
OFFSET %s;
sql.filter=SELECT \
  a.id, \
  a.room_count, \
  a.apartment_type_id, \
  at.name, \
  a.price, \
  a.name \
FROM apartments a \
  INNER JOIN apartment_types at ON at.id = a.apartment_type_id \
WHERE a.room_count = ? AND at.name = ? \
      AND NOT EXISTS( \
    SELECT \
      o.id, \
      o.request_id \
    FROM orders o \
      INNER JOIN requests r ON r.id = o.request_id \
    WHERE r.from_date > ? \
) \
ORDER BY a.id \
LIMIT %s \
OFFSET %s;
sql.filter.count=\
SELECT \
  COUNT(*) \
FROM apartments a \
  INNER JOIN apartment_types at ON at.id = a.apartment_type_id \
WHERE a.room_count = ? AND at.name = ? \
      AND NOT EXISTS( \
    SELECT \
      o.id, \
      o.request_id \
    FROM orders o \
      INNER JOIN requests r ON r.id = o.request_id \
    WHERE r.from_date > ? \
)